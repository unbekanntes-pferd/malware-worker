import { HttpService } from '@nestjs/axios';
import { Logger } from '@nestjs/common';
import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { RpcException } from '@nestjs/microservices';
import { catchError, lastValueFrom, map, Observable, tap } from 'rxjs';
import { AuthTokenResponse, DownloadTokenGenerateResponse } from 'src/app.models';

@Injectable()
export class DownloadService {

    logger = new Logger('DownloadService');

    constructor(private readonly configService: ConfigService, private readonly httpService: HttpService) { }

    // authenticate as DRACOON admin
    private login(): Promise<AuthTokenResponse> {


        let tokenUrl = `${this.configService.get('dracoon.url')}/oauth/token`;

        const clientId = this.configService.get('dracoon.clientId');
        const clientSecret = this.configService.get('dracoon.clientSecret');

        const buffer = Buffer.from(`${clientId}:${clientSecret}`, 'utf-8');

        const clientAuth = buffer.toString('base64');

        const username = this.configService.get('dracoon.roomService.roomAdminUsername');
        const password = this.configService.get('dracoon.roomService.roomAdminPassword');


        // x-www-urlencoded credentials for OAuth2 password flow
        const credentials = new URLSearchParams({
            grant_type: 'password',
            username: username,
            password: password,
        });

        // axios request config
        const options = {
            headers: {
                Authorization: `Basic ${clientAuth}`,
                'Content-Type': 'application/x-www-form-urlencoded',
            },
        };

        return lastValueFrom(this.httpService.post(tokenUrl, credentials, options).pipe(

            catchError((e) => {
                this.logger.error('DRACOON authentication failed');
                this.logger.error(e);
                throw new RpcException(e);
            }),
            map((response) => response.data)
        ));
    };


    private async getDownloadUrl(nodeId: number): Promise<DownloadTokenGenerateResponse> {


        // authenticate in DRACOON
        const accessTokenResponse = await this.login();
        const getDownloadUrl = `${this.configService.get('dracoon.url')}/api/v4/nodes/files/${nodeId.toString()}/downloads`;

        // axios request config
        const options = {
            headers: {
                Authorization: `Bearer ${accessTokenResponse.access_token}`,
                'Content-Type': 'application/json',
            },
        };

        return lastValueFrom(this.httpService.post(getDownloadUrl, undefined, options).pipe(
            catchError((e) => {
                this.logger.error("Getting download URL failed.");
                this.logger.error(e.response.data);
                throw new RpcException(e.response.data);
            }),
            map((response) => response.data),
        ))
    }

    async downloadFile(nodeId: number): Promise<Uint8Array> {

        const downloadResponse = await this.getDownloadUrl(nodeId);

        // axios request config
        const options = {
            responseType: 'arraybuffer',

        };

        return lastValueFrom(this.httpService.get(downloadResponse.downloadUrl, options as any).pipe(
            catchError((e) => {
                this.logger.error("Download failed.");
                this.logger.error(e.response.data);
                throw new RpcException(e.response.data);
            }),
            map((response) => response.data),
        ));
    }
}
